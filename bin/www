#!/usr/bin/env node

/**
 * Module dependencies.
 */
/**
 * 依赖加载
 */
var app = require('../app');
var debug = require('debug')('nodejs-demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
/**
 * 定义启动端口
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
/**
 * 创建HTTP服务器实例
 */
var server = http.createServer(app);

/**
 * 监听即实通信
 */

//在线用户
var onlineUser={};
var onlineCount=0;

var io = require('socket.io')(server);
io.on('connection', function (socket) {
    console.info('有新的用户连接！');
    socket.on('login', function( obj ) {
        console.log('新用户登录');
        socket.name = obj.userId;
        if(!onlineUser.hasOwnProperty(obj.userId)) {
            onlineUser[obj.userId]= obj.userName;
            //在线人数+1
            onlineCount++;
        }
        //广播消息
        io.emit('login',{onlineUser: onlineUser, onlineCount: onlineCount, user: obj});
        console.log(obj.userName + "加入了聊天室");
    })
    //监听用户退出
    socket.on('disconnect',function () {
        //将退出用户在在线列表删除
        if(onlineUser.hasOwnProperty(socket.name)){
            //退出用户信息
            var obj={ userid: socket.name, username: onlineUser[socket.name] };
            //删除
            delete onlineUser[socket.name];
            //在线人数-1
            onlineCount--;
            //广播消息
            io.emit('logout', {onlineUser: onlineUser, onlineCount: onlineCount, user: obj});
            console.log(obj.username+"退出了聊天室");
        }
    })
    //监听用户发布聊天内容
    socket.on('message', function(obj) {
        //向所有客户端广播发布的消息
        io.emit('message', obj);
        console.log(obj.username + '说：' + obj.content);
    });
});

/**
 * Listen on provided port, on all network interfaces.
 */
/**
 * 启动网络服务监听端口
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
/**
 * 端口标准化函数
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
